---
params:
  site: "https://steffilazerte.ca/workshop-dealing-with-data"
  answers: "visible" #"hidden"
format: 
  revealjs:
    title: Visualizing Data in R
    subtitle: A primer on <code>ggplot2</code>
    title-slide-attributes: 
      data-background-image: figures/viz_fig.png
      data-background-size: "55%"
      data-background-position: "95% 50%"
cache: false
---

```{r setup, include = FALSE}
visibility <- params$answers

library(palmerpenguins)
library(tidyverse)
library(patchwork)
library(here)
source("0_figs.R")
```

# First things first

:::{style="text-align:left; padding: 15px 200px 15px 200px"}
{{< fa floppy-disk >}} Save previous script

{{< fa folder-open >}} Open New File <br>
[(make sure you're in the RStudio Project)]{.small .hang}

{{< fa pen >}} Write `library(tidyverse)` at the top

{{< fa floppy-disk >}} Save this new script <br>
[(consider names like `figs.R` or `2_figures.R`)]{.small .hang}
:::

## Outline

### 1. Figures with `ggplot2` [(A `tidyverse` package)]{.small}

- Basic plot
- Common plot types
- Plotting by categories
- Adding statistics
- Customizing plots
- Annotating plots

![](figures/hex_ggplot2.png){width=20% .absolute top=0 right=0 fig-alt="Hex logo for ggplot2 R package"}

### 2. Combining figures with `patchwork`

### 3. Saving figures

![](figures/hex_patchwork.svg){width=20% .absolute bottom=30 right=0 fig-alt="Hex logo for patchwork R package"}


## {data-menu-title="ggplot2" background-image="figures/horst_ggplot2.png" background-size=75% background-position="top" title="A fuzzy monster in a beret and scarf, critiquing their own column graph on a canvas in front of them while other assistant monsters (also in berets) carry over boxes full of elements that can be used to customize a graph (like themes and geometric shapes). In the background is a wall with framed data visualizations. Stylized text reads \"ggplot2: build a data masterpiece.\""}

[Artwork by [@allison_horst](https://github.com/allisonhorst/stats-illustrations)]{.footnote}


## Our data set: Palmer Penguins!

![](figures/horst_lter_penguins.png){width=80% fig-alt="Cartoons of three penguins labelled 'Chinstrap!', 'Gentoo!', and 'Adelie!'"}
![](figures/hex_palmerpenguins.png){.absolute top=0 right=0 width=20% fig-alt="Hex logo for palmerpenguins R package"}

[Artwork by [\@allison_horst](https://github.com/allisonhorst/stats-illustrations)]{.footnote}

## Our data set: Palmer Penguins!

```{r}
library(palmerpenguins)
penguins
```

![](figures/hex_palmerpenguins.png){.absolute top="0" right="0" width="12%" fig-alt="Hex logo for palmerpenguins R package"}

[Artwork by [\@allison_horst](https://github.com/allisonhorst/stats-illustrations)]{.footnote}

::: columns
::: {.column width="30%"}
![](figures/horst_lter_penguins.png){fig-alt="Cartoons of three penguins labelled 'Chinstrap!', 'Gentoo!', and 'Adelie!'"}
:::

::: {.column .fragment width="70%"}
> **Your turn!**
> 
> Run this code and look at the output in the console
:::
:::


## Side Note

### Where did the `penguins` data set come from?

- Sometimes R packages contain data
- If you load a package (i.e. `library(palmerpenguins)`) you can use the data
- **Note** that here the data object is called `penguins` (not `palmerpenguins`)
- **Note** this is NOT how you'll load your own data 

## A basic plot

```{r basic_plot}
#| fig-width: 6
#| fig-asp: 0.5
#| out-width: 70%
#| fig-align: center

library(palmerpenguins)
library(tidyverse)

ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm)) +
    geom_point()
```

## Break it down

```{r}
#| code-line-numbers: "1"
#| eval: false
<<basic_plot>>
```

:::: {.columns}

::: {.column width="50%"}
### `library(palmerpenguins)`
-   Load the `palmerguins` package
-   Now we have access to `penguins` data
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 0.75
#| fig.width: 6
<<basic_plot>>
```
:::

::::

## Break it down

```{r}
#| code-line-numbers: "2"
#| eval: false
<<basic_plot>>
```

:::: {.columns}

::: {.column width="50%"}
### `library(ggplot2)`
- Load the `tidyverse` packages  
  [(includes `ggplot2`)]{.small}
- Now we have access to the `ggplot()` function
  [(and `aes()` and `geom_point()` etc.)]{.small}
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 0.75
#| fig.width: 6
<<basic_plot>>
```
:::

::::

## Break it down

```{r}
#| eval: false
#| code-line-numbers: "4"
<<basic_plot>>
```

::: columns
::: {.column width="50%"}
### `ggplot()`

-   Set the attributes of your plot
-   **`data`** = Dataset
-   **`aes`** = Aesthetics (how the data are used)
-   Think of this as your plot defaults
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 0.75
#| fig.width: 6
<<basic_plot>>
```
:::
:::

## Break it down

```{r}
#| code-line-numbers: "5"
#| eval: false
<<basic_plot>>
```

::: columns
::: {.column width="50%"}
### `geom_point()`

-   Choose a `geom` function to display the data
-   Always *added* to a `ggplot()` call with `+`

> ggplots are essentially layered objects, starting with a call to `ggplot()`
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig-asp: 0.75
#| fig-width: 6
<<basic_plot>>
```
:::
:::


## Plots are layered

::: columns
::: {.column .small width="50%"}
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| out-extra: "style='padding-top:0.75em'"
ggplot(data = penguins, aes(x = sex, y = body_mass_g))
```
:::

::: {.column .small width="50%"}
::: r-stack
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_boxplot()
```

::: fragment
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_point()
```
:::

::: fragment
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_violin()
```
:::
:::
:::
:::

## Plots are layered

::: columns
::: {.column width="50%"}
### You can add multiple layers

::: {.r-stack .small}
```{r}
#| fig-asp: 0.85
#| fig-width: 5
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_boxplot()
```

::: fragment
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_boxplot() +
  geom_point(size = 2, colour = "red", 
             position = position_jitter(width = 0.05))
```
:::
:::
:::

::: {.column .fragment}
### Order matters

::: small
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_point(size = 2, colour = "red",
             position = position_jitter(width = 0.05)) +
  geom_boxplot()
```
:::
:::
:::



## Plots are objects

### Any ggplot can be saved as an object

```{r}
g <- ggplot(data = penguins, aes(x = sex, y = body_mass_g))
```

::: {.columns}
::: {.column .fragment width="50%"}
```{r}
#| fig-asp: 0.75
#| fig-width: 5
g
```
:::

::: {.column .fragment width="50%"}
```{r}
#| fig-asp: 0.75
#| fig-width: 5
g + geom_boxplot()
```
:::
:::


# More Geoms

**(Plot types)**


## Geoms: Lines

```{r}
#| fig-align: center
#| fig-width: 8
#| fig-asp: 0.5
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm)) +
  geom_line()
```


## Geoms: Boxplots

```{r}
#| fig-align: center
#| fig-width: 8
#| fig-asp: 0.5
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = species, y = flipper_length_mm)) +
  geom_boxplot() 
```


## Geoms: Histogram

```{r}
#| fig-align: center
#| fig-width: 8
#| fig-asp: 0.5
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 100)
```


[**Note**:<br>We only need 1 aesthetic here]{.note .fragment .absolute left=80% top=5% width=30%}


## Geoms: Barplots

### Let `ggplot` count your data

```{r}
#| fig-align: center
#| fig-asp: 0.6
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = sex)) +
  geom_bar()
```

## Geoms: Barplots

### You can also provide the counts

```{r}
#| fig-align: center
#| fig-asp: 0.6
#| code-line-numbers: "6"

# Create our own data frame
species_counts <- data.frame(species = c("Adelie", "Chinstrap", "Gentoo"),
                             n = c(152, 68, 124))

ggplot(data = species_counts, aes(x = species, y = n)) +
  geom_bar(stat = "identity")
```



## Your Turn: Create this plot

```{r}
#| eval: false
ggplot(data = ____, aes(x = ____, y = ____)) +
  geom_____(____)
```

```{r yt_boxplot}
#| fig-align: center
#| fig-asp: 0.6
#| echo: false
ggplot(data = penguins, aes(x = island, y = bill_depth_mm)) +
  geom_boxplot(colour = "blue")
```

[**Too Easy?**<br>Plot points on top<br><small>Why not consider jittering them?</small>]{.note .absolute left=80% top=5%}

## Your Turn: Create this plot {visibility=`r visibility`}

```{r}
#| fig-align: center
#| fig-asp: 0.6
<<yt_boxplot>>
```


## Your Turn: Create this plot {visibility=`r visibility`}
**Too Easy?**

```{r}
#| fig-align: center
#| fig-asp: 0.6
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = island, y = bill_depth_mm)) +
  geom_boxplot(colour = "blue") +
  geom_point()
```

## Your Turn: Create this plot {visibility=`r visibility`}
**Too Easy?**

```{r}
#| fig-align: center
#| fig-asp: 0.6
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = island, y = bill_depth_mm)) +
  geom_boxplot(colour = "blue") +
  geom_point(position = position_jitter(width = 0.1))
```


## Your Turn: Create this plot {visibility=`r visibility`}
**Too Easy?**

```{r}
#| fig-align: center
#| fig-asp: 0.6
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = island, y = bill_depth_mm)) +
  geom_boxplot(colour = "blue") +
  geom_count()
```


# Showing data by group

## Mapping aesthetics

```{r}
#| fig-asp: 0.5
#| out-width: 80%
#| fig-width: 7.5
#| fig-align: center
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm)) +
  geom_point()
```

## Mapping aesthetics

```{r}
#| fig-asp: 0.5
#| out-width: 80%
#| fig-width: 7.5
#| fig-align: center
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = sex)) +
  geom_point()
```

## Mapping aesthetics

### `ggplot` automatically populates the legends (combining where it can)

```{r}
#| fig-asp: 0.4
#| fig-align: center
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = sex, shape = sex)) +
  geom_point()
```

## Faceting: `facet_wrap()`

```{r}
#| fig-asp: 0.4
#| fig-width: 8
#| code-line-numbers: "3"
#| fig-align: center
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = sex)) +
  geom_point() +
  facet_wrap(~ species)
```

> Split plots by **one** grouping variable

## Faceting: `facet_grid()`

```{r}
#| fig-asp: 0.4
#| fig-width: 8
#| code-line-numbers: "3"
#| fig-align: center
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = sex)) +
  geom_point() +
  facet_grid(sex ~ species)
```

> Split plots by **two** grouping variables

## Your Turn: Create this plot

```{r}
#| eval: false
ggplot(data = ____, aes(_____________________________________)) +
  ______________ +
  ______________
```

```{r yt_facet}
#| echo: false
#| fig-asp: 0.4
#| fig-align: center
ggplot(data = penguins, aes(x = sex, y = flipper_length_mm, fill = sex)) +
  geom_boxplot() +
  facet_wrap(~ species)
```

> **Hint:** `colour` is for outlining with a colour, `fill` is for 'filling' with a colour <br> **Too Easy?** Split boxplots by sex **and** island

## Your Turn: Create this plot {visibility=`r visibility`}

```{r}
#| fig-align: center
#| fig-asp: 0.4
<<yt_facet>>
```

> **Hint:** `colour` is for outlining with a colour, `fill` is for 'filling' with a colour <br> **Too Easy?** Split boxplots by sex **and** island

## Your Turn: Create this plot {visibility=`r visibility`}

**Too Easy?**

```{r}
#| fig-align: center
#| fig-asp: 0.4
ggplot(data = penguins, aes(x = sex, y = flipper_length_mm, fill = island)) +
  geom_boxplot() +
  facet_wrap(~ species)
```

> Small change (`fill = sex` to `fill = island`) results in completely different plot


# Adding Statistics to Plots

## Summarizing data

### Add data means as points
```{r}
#| fig-align: center
#| fig-asp: 0.55
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  stat_summary(geom = "point", fun = mean)
```

## Summarizing data

### Add error bars, calculated from the data
```{r, fig.asp = 0.55}
#| fig-align: center
#| fig-asp: 0.55
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  stat_summary(geom = "point", fun = mean) +
  stat_summary(geom = "errorbar", width = 0.05, fun.data = mean_se)
```


# Trendlines / Regression Lines

## Trendlines / Regression lines

### `geom_line()` is connect-the-dots, not a trend or linear model

```{r}
#| fig-align: center
#| fig-asp: 0.5
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm)) +
  geom_point() +
  geom_line()
```

[Not what we're looking for]{.note .fragment .absolute bottom=10% left=80% width=30%}

## Trendlines / Regression lines

### Let's add a trend line properly

Start with basic plot:

```{r}
#| fig-align: center
#| fig-asp: 0.5
g <- ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm)) +
  geom_point()
g
```

## Trendlines / Regression lines

### Add the `stat_smooth()`

-   `lm` is for "linear model" (i.e. trendline)
-   grey ribbon = standard error

```{r}
#| fig-align: center
#| fig-asp: 0.5
g + stat_smooth(method = "lm")
```

## Trendlines / Regression lines

### Add the `stat_smooth()`

-   remove the grey ribbon `se = FALSE`

```{r}
#| fig-align: center
#| fig-asp: 0.5
g + stat_smooth(method = "lm", se = FALSE)
```

## Trendlines / Regression lines

### A line for each group

-   Specify group (here we use `colour` to specify `species`)

```{r}
#| fig-align: center
#| fig-asp: 0.5
g <- ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +
  geom_point()
g
```

## Trendlines / Regression lines

### A line for each group

-   `stat_smooth()` automatically uses the same grouping

```{r}
#| fig-align: center
#| fig-asp: 0.5
#| message: false
g + stat_smooth(method = "lm", se = FALSE)
```

## Trendlines / Regression lines

### A line for each group AND overall

```{r}
#| fig-align: center
#| fig-asp: 0.5
g +
  stat_smooth(method = "lm", se = FALSE) +
  stat_smooth(method = "lm", se = FALSE, colour = "black")
```


## Your Turn: Create this plot

-   A scatter plot: Flipper Length by Body Mass grouped by Species
-   With *a single regression line for the overall trend*

> **Too Easy?** Add regression lines for each species as well  
> [Can you make the species lines larger?]{.small}  
> [Can you indicate which points are female and which are male?]{.small}

## Your Turn: Create this plot {visibility=`r visibility`}

-   A scatter plot: Flipper Length by Body Mass grouped by Species
-   With *a single regression line for the overall trend*

```{r}
#| fig-asp: 0.5
#| fig-align: center
ggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, colour = species)) +
  geom_point() +
  stat_smooth(method = "lm", se = FALSE, colour = "black")
```

## Your Turn: Create this plot {visibility=`r visibility`}

**Too Easy?**

```{r}
#| fig-align: center
#| fig-asp: 0.5
ggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, colour = species)) +
  geom_point() +
  stat_smooth(method = "lm", se = FALSE) +
  stat_smooth(method = "lm", se = FALSE, colour = "black")
```

## Your Turn: Create this plot {visibility=`r visibility`}

**Too Easy?**

```{r}
#| fig-align: center
#| fig-asp: 0.5
ggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, 
                            colour = species)) +
  geom_point(aes(shape = sex), size = 2, fill = "white") +
  stat_smooth(method = "lm", se = FALSE, linewidth = 2) +
  stat_smooth(method = "lm", se = FALSE, colour = "black") +
  scale_shape_manual(values = c(20, 21))
```


# Customizing plots

## Customizing: Starting plot

### Let's work with this plot

```{r}
g <- ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +
  geom_point()
```

```{r}
#| fig-align: center
#| echo: false
#| fig.asp: 0.5
#| cache: false
g
```

## Customizing: Labels

```{r}
#| fig-align: center
#| fig-asp: 0.5
g + labs(title = "Bill Length vs. Body Mass",
         x = "Body Mass (g)",
         y = "Bill Length (mm)",
         colour = "Species", tag = "A")
```

[**Your Turn:** Add proper labels to some of your previous plots]{.note .fragment .absolute bottom=60% left=80% width="30%"}


## Customizing: Built-in themes

```{r}
#| echo: false
#| out-width: 100%
#| fig-asp: 0.5
#| fig-width: 12

g1 <- g + theme_bw() + labs(title = "g + theme_bw()")
g2 <- g + theme_classic() + labs(title = "g + theme_classic()")
g3 <- g + theme_minimal() + labs(title = "g + theme_minimal()")
g4 <- g + theme_dark() + labs(title = "g + theme_dark()")
(g1 + g2) / (g3 + g4)
```

## Customizing: Axes

`scale_` + (`x` or `y`) + type (`continuous`, `discrete`, `date`, `datetime`)

-   `scale_x_continuous()`
-   `scale_y_discrete()`
-   etc.

### Common arguments

```{r, eval = FALSE}
g + scale_x_continuous(breaks = seq(0, 20, 10)) # Tick breaks
g + scale_x_continuous(limits = c(0, 15))       # xlim() is a shortcut for this
g + scale_x_continuous(expand = c(0, 0))        # Space between axis and data
```

:::{.spacer}
Let's take a look...
:::

## Customizing: Axes

### Breaks

```{r}
#| fig-align: center
#| fig-asp: 0.5
g + scale_x_continuous(breaks = seq(2500, 6500, 500))
```

## Customizing: Axes

### Limits

```{r}
#| fig-align: center
#| fig-asp: 0.5
g + scale_x_continuous(limits = c(3000, 4000))
```

## Customizing: Axes

### Space between origin and axis start

```{r}
#| fig-align: center
#| fig-asp: 0.5
g + scale_x_continuous(expand = c(0, 0))
```

## Customizing: Aesthetics

### Using scales

`scale_` + aesthetic [(`colour`, `fill`, `size`, etc.)]{.small} + type [(`manual`, `continuous`, `datetime`, etc.)]{.small}

```{r}
#| fig-align: center
#| fig-asp: 0.5
g + scale_colour_manual(name = "Type", values = c("green4", "blue4", "gold"))
```

## Customizing: Aesthetics

### Using scales

Or be very explicit:

```{r}
#| fig-align: center
#| fig-asp: 0.5
g + scale_colour_manual(
  name = "Type",
  values = c("Adelie" = "green4", "Gentoo" = "blue4", "Chinstrap" = "gold"),
  na.value = "black")
```


## Customizing: Aesthetics

### For colours, consider colour-blind-friendly scale

**`viridis_d` for "discrete" data**

```{r}
#| fig-align: center
#| fig-asp: 0.5
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +
  geom_point() +
  scale_colour_viridis_d(name = "Type")
```

## Customizing: Aesthetics

### For colours, consider colour-blind-friendly scale

**`viridis_c` for "continuous" data**

```{r}
#| fig-align: center
#| fig-asp: 0.5
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = flipper_length_mm)) +
  geom_point() +
  scale_colour_viridis_c(name = "Flipper Length (mm)")
```

## Customizing: Aesthetics

### Forcing

Remove the association between a variable and an aesthetic

```{r}
#| fig-align: center
#| fig-asp: 0.5
#| code-line-numbers: "2,3"
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = sex)) +
  geom_point(colour = "darkblue", size = 1) +
  stat_smooth(method = "lm", se = FALSE, colour = "lightblue")
```

[**Note**: When forcing, aesthetic is not inside `aes()`]{.note .fragment .absolute left=75% bottom=65%}

## Customizing: Legends placement

::: columns
::: {.column width="50%"}
### At the: top, bottom, left, right

```{r}
#| fig-align: center
#| fig-asp: 0.9
#| fig-width: 5
#| out-width: 100%
g + theme(legend.position = "top")
```
:::

::: {.column width="50%"}
### Exactly here

```{r}
#| fig-asp: 0.9
#| fig-width: 5
#| out-width: 100%
g + theme(legend.position = c(0.15, 0.7))
```
:::
:::


## Your Turn: Create this plot

```{r yt_hard}
#| fig-align: center
#| fig-asp: 0.5
#| fig-width: 10
#| out-width: "90%"
#| echo: false

ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, colour = species)) +
  theme_bw() + 
  geom_point() +
  stat_smooth(method = "lm", se = FALSE, colour = "black") + 
  scale_colour_viridis_d() +
  facet_wrap(~ sex) +
  labs(x = "Body Mass (g)",
       y = "Flipper Length (mm)",
       colour = "Species")
```

[**Too Easy?**<br>[Play with shape values >20 and fill and colour<br>Or, create a plot of your own data]{.small}
]{.note .absolute left=85% bottom=-10% width=35%}


## Your Turn: Create this plot {visibility=`r visibility`}

```{r}
#| fig-align: center
#| fig-asp: 0.4
#| fig-width: 10
#| warning: false
#| message: false
<<yt_hard>>
```

## Your Turn: Create this plot {visibility=`r visibility`}

**Too easy?**

```{r}
#| fig-align: center
#| fig-asp: 0.4
#| fig-width: 10

ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, fill = species)) +
  theme_bw() + 
  geom_point(shape = 21) +
  stat_smooth(method = "lm", se = FALSE, colour = "black", fill = NA) + 
  scale_fill_viridis_d() +
  facet_wrap(~ sex) +
  labs(x = "Body Mass (g)",
       y = "Flipper Length (mm)",
       colour = "Species")
```


# Side note: Order of operations

## Order of operations

### Remember...
- `ggplot()` is the default line (all options passed down)
- The other lines are *added* with the `+` (options only apply to this line)

## Order of operations

### Where to put the `aes()`?

**Sometimes it doesn't matter...**

::::{.columns}
:::{.column width=50%}
```{r}
#| fig-align: center
#| fig-width: 6
#| fig-asp: 0.7
#| code-line-numbers: "3"
ggplot(penguins, aes(x = body_mass_g, 
                     y = flipper_length_mm, 
                     colour = species)) +
  geom_point()
```
:::

:::{.column width=50%}
```{r, fig.asp = 0.5, out.width = "100%"}
#| fig-align: center
#| fig-width: 6
#| fig-asp: 0.7
#| code-line-numbers: "3"
#| out-extra: "style='padding-top:0.85em'"
ggplot(penguins, aes(x = body_mass_g, 
                     y = flipper_length_mm)) +
  geom_point(aes(colour = species))
```
:::
::::


## Order of operations

### Where to put the `aes()`?

**Sometimes it DOES matter...**

::::{.columns}
:::{.column width=50%}
```{r, fig.asp = 0.5, out.width = "100%", message = FALSE}
#| code-line-numbers: "3"
#| fig-align: center
#| fig-width: 6
#| fig-asp: 0.7
ggplot(penguins, aes(x = body_mass_g, 
                     y = flipper_length_mm, 
                     colour = species)) +
  geom_point() +
  stat_smooth(method = "lm")
```
:::
:::{.column width=50%}
```{r, fig.asp = 0.5, out.width = "100%", message = FALSE}
#| out-extra: "style='padding-top: 0.85em'"
#| code-line-numbers: "3"
#| fig-align: center
#| fig-width: 6
#| fig-asp: 0.7
ggplot(penguins, aes(x = body_mass_g, 
                     y = flipper_length_mm)) +
  geom_point(aes(colour = species)) +
  stat_smooth(method = "lm")
```
:::
::::

[Applies to ALL lines in the ggplot<br>including `stat_smooth()`]{.note .fragment .absolute left=25% top=90%}

[Applies to only the `geom_point()` in the ggplot<br>not `stat_smooth()`]{.note .fragment .absolute left=75% top=90% width=30%}



<!-- # Annotating plots -->


<!-- ## Annotating -->

<!-- ### Plot to be annotated: Let's add sample sizes -->

<!-- ```{r} -->
<!-- #| fig-asp: 0.35 -->
<!-- #| fig-width: 10 -->
<!-- #| fig-align: center -->
<!-- ggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, colour = species)) + -->
<!--   geom_point() + -->
<!--   facet_grid(~ species) -->
<!-- ``` -->


<!-- ## Annotating -->

<!-- ### Create data to use in our annotations -->
<!-- (`mutate()` is covered tomorrow!) -->

<!-- ```{r} -->
<!-- library(tidyverse) -->
<!-- n <- count(penguins, species) -->
<!-- n <- mutate(n, text = paste0("n = ", n)) -->
<!-- n -->
<!-- ``` -->


<!-- ## Annotating -->

<!-- ```{r, fig.asp = 0.25, out.width = "100%", fig.width = 10} -->
<!-- #| code-line-numbers: "4:8" -->
<!-- ggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, colour = species)) + -->
<!--   geom_point() + -->
<!--   facet_grid(~ species) + -->
<!--   geom_text(data = n,                  # Use 'n' data set                          -->
<!--             x = +Inf, y = -Inf,        # Location relative to plot (right, bottom) -->
<!--             aes(label = text),         # Map 'text' to label                       -->
<!--             hjust = 1, vjust = 0,      # Adjust horizontal and vertical placement  -->
<!--             colour = "black")          # black text  -->
<!-- ``` -->



# Combining plots with `patchwork`<br>![](figures/hex_patchwork.svg){width=20%}



## {data-menu-title="patchwork" background-image="figures/horst_patchwork.png" background-size=85% background-position="top" title="Fuzzy cartoon monsters in white gloves and uniforms hanging multiple plots together on a wall, with an artist monster wearing a beret and smock directing them to the correct orientation. There is a blueprint plan on the wall showing how the plots should be arranged. Stylized title font reads \"patchwork - combine & arrange your ggplots!\""}

[Artwork by [@allison_horst](https://github.com/allisonhorst/stats-illustrations)]{.footnote}

## Combining plots

### Setup

-   Load `patchwork`
-   Create a couple of different plots

```{r}
library(patchwork)

g1 <- ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +
  geom_point()

g2 <- ggplot(data = penguins, aes(x = species, y = flipper_length_mm)) +
  geom_boxplot()

g3 <- ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
  geom_point()
```
## Combining plots with `patchwork`

### Side-by-Side 2 plots

```{r}
#| fig-asp: 0.4
#| fig-width: 10
#| fig-align: center
g1 + g2
```

## Combining plots with `patchwork`

### Side-by-Side 3 plots

```{r}
#| fig-asp: 0.4
#| fig-width: 10
#| fig-align: center
g1 + g2 + g3
```

## Combining plots with `patchwork`

### Stacked 2 plots

```{r}
#| fig-asp: 0.8
#| fig-width: 8
#| fig-align: center
g1 / g2
```

## Combining plots with `patchwork`

### More complex arrangements

```{r}
#| fig-width: 8
#| fig-align: center
#| fig-asp: 0.5
g2 + (g1 / g3)
```

## Combining plots with `patchwork`

### More complex arrangements

```{r}
#| out-width: 50%
#| fig-asp: 0.8
#| fig-width: 7
#| fig-align: center
g2 / (g1 + g3)
```

## Combining plots with `patchwork`

### "collect" common legends

```{r}
#| out-width: 50%
#| fig-asp: 0.8
#| fig-width: 7
#| fig-align: center
g2 / (g1 + g3) + plot_layout(guides = "collect")
```

## Combining plots with `patchwork`

### "collect" common legends

```{r}
#| out-width: 50%
#| fig-asp: 0.8
#| fig-width: 7
#| fig-align: center
g2 / (g1 + g3 + plot_layout(guides = "collect"))
```


## Combining plots with `patchwork`

### Annotate

```{r}
#| fig-width: 8
#| fig-asp: 0.6
#| out-width: 60%
#| fig-align: center
g2 / (g1 + g3) +
  plot_layout(guides = "collect") +
  plot_annotation(title = "Penguins Data Summary",
                  caption = "Fig 1. Penguins Data Summary",
                  tag_levels = "A",
                  tag_suffix = ")")
```


:::{.fragment}
[**Your Turn**<br>Combine any 3 figures]{.note .absolute left=10% bottom=20% width=25%}
[**Too Easy?**<br>[Can you figure out how to collect common axes as well?]{.small}]{.note .absolute left=80% top=25% width=43%}
:::

## Your Turn: Combine plots {visibility=`r visibility`}

**Too easy?**

```{r}
#| fig-width: 8
#| fig-asp: 0.4
#| out-width: 60%
#| fig-align: center

g1 <- ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +
  geom_point()

g2 <- ggplot(data = penguins, aes(x = flipper_length_mm, y = bill_depth_mm, colour = species)) +
  geom_point()

g1 + g2 + plot_layout(guides = "collect", axes = "collect")
```



# Saving plots

## Saving plots

### RStudio Export

***Demo***

:::{.fragment}
### `ggsave()`

```{r}
g <- ggplot(penguins, aes(x = sex, y = bill_length_mm)) +
  geom_boxplot()

ggsave(filename = "penguins_mass.png", plot = g)
```

:::

## Saving plots

### Publication quality plots

-   Many publications require 'lossless' (pdf, svg, eps, ps) or high quality formats (tiff, png)
-   Specific sizes corresponding to columns widths
-   Minimum resolutions

```{r}
g <- ggplot(penguins, aes(x = sex, y = body_mass_g)) +
  geom_boxplot() +
  labs(x = "Sex", y = "Body Mass (g)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave(filename = "penguins_mass.pdf", plot = g, dpi = 300,
       height = 80, width = 129, units = "mm")
```

```{r}
#| include: false
unlink("penguins_mass.pdf")
unlink("penguins_mass.png")
```





## Wrapping up: Common mistakes {.space-list}

- The **package** is `ggplot`**2**, the function is just **`ggplot()`**
- Did you remember to put the **`+`** at the **end** of the line?
- **Order matters!**
  - If you're using custom `theme()`'s, make sure you put these lines **after** bundled themes like `theme_bw()`, or they will be overwritten
- Variables like 'year' are treated as continuous, but are really categories
  - Wrap them in `factor()`
  - e.g. `ggplot(data = penguins, aes(x = factor(year), y = body_mass_g))` 


## Wrapping up: Common mistakes

### I get an error regarding an object that can't be found or aesthetic length?

You are probably trying to plot two different datasets, and you make references to variables in the `ggplot()` call that don't exist in one of the datasets:

```{r}
#| error: true
n <- count(penguins, island)

ggplot(data = penguins, aes(x = flipper_length_mm, y = bill_length_mm, colour = species)) +
  geom_point() +
  facet_wrap(~ island) +
  geom_text(data = n, aes(label = n), 
            x = -Inf, y = +Inf, hjust = 0, vjust = 1)
```


## Wrapping up: Common mistakes

### I get an error regarding an object that can't be found or aesthetic length?

Either move the aesthetic...

```{r}
#| out-width: 50%
#| fig-asp: 0.5
#| fig-width: 8
#| fig-align: center
ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +  
  geom_point(aes(colour = species)) +
  facet_wrap(~ island) +
  geom_text(data = n, aes(label = n), 
            x = -Inf, y = +Inf, hjust = 0, vjust = 1)
```

## Wrapping up: Common mistakes

### I get an error regarding an object that can't be found or aesthetic length?

Either move the aesthetic...

Or assign it to `NULL` where it is missing...

```{r}
#| out-width: 50%
#| fig-asp: 0.5
#| fig-width: 8
#| fig-align: center
ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm, colour = species)) +  
  geom_point() +
  facet_wrap(~ island) +
  geom_text(data = n, aes(label = n, colour = NULL), 
            x = -Inf, y = +Inf, hjust = 0, vjust = 1)
```


## Wrapping up: Further reading (all **Free**!) {.space-list}
- RStudio > Help > Cheatsheets > Data Visualization with ggplot2
- [`ggplot2` book v3](https://ggplot2-book.org) [by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen]{.small}
- [`patchwork` website](https://patchwork.data-imaginist.com/)
- [Cookbook for R](http://www.cookbook-r.com) [by Winston Chang]{.small}
- [R for Data Science](https://r4ds.hadley.nz/) [by Hadley Wickham and Garret Grolemund]{.small}
  - [Chapter on Data Visualization](https://r4ds.hadley.nz/data-visualize.html)
- [Data Visualization: A practical introduction](http://socviz.co/) [by Kieran Healy]{.small}

